Clean Architecture Project Structure
---------------------------------------
Part 1

dotnet new sln --o BuberDinner
more .\BuberDinner.sln เพื่อดู detail ของ solution

dotnet new webapi -o BuberDinner.Api
- Api เป็น Interface ที่ใช้สำหรับเชื่อมต่อ outside world
dotnet new classlib -o BuberDinner.Contracts
- Contracts is a project ที่ model ของ request และ response 
dotnet new classlib -o BuberDinner.Infrastructure
dotnet new classlib -o BuberDinner.Application
dotnet new classlib -o BuberDinner.Domain

dotnet new classlib -o -BuberDinner.Contracts

Api reference Contracts, Infrastructure, Application
dotnet add Api reference Contracts
dotnet add Api reference Infrastructure
dotnet add Api reference Application

Infrastrucuture reference Application
dotnet add Infrastructure reference Application

Application reference Domain
dotnet add Application reference Domain

Application, Infrastructure has own DependencyInjection for easier to manage code 


---------------------------------------
Part 2
implement JWTTokenGenerator by Declare abstractions(Interface) IJwtTokenGenerator at Application and let Infrastructure implements it and configureService in DependencyInjection of Infrastructure

init setter accessor - These properties and indexers can be set at the point of object creation for immutable data purpose เหมือนการทำ get only properties และทำ constructor ที่ set ค่า property นั้น ๆ ได้ก็ต่อเมื่อตอน new object เท่านั้น

create JwtSettings model to map with JwtSettings in appSetting.json
and then add it to IOptions by
services.Configure<JwtSettings>(configuration.GetSection(JwtSettings.SectionName));

To be more secure we can use user-secrets

dotnet user-secrets init --project .\BuberDinner.Api\

dotnet user-secrets set --project .\BuberDinner.Api\ "JwtSettings:Secret" "super-secret-key-from-user-secrets" 
to set user-secret to section in appSetting

dotnet user-secrets list --project .\BuberDinner.Api\ 
to list user-secrets

---------------------------------------
Part 3

Repository is for encapsulate the logic required to access data source
so Repository Class should be in Persistence of Infrastructure and IRepository Interface should be in Persistence of Application
the reason we implement in Infrastructure because we can have many to access data such as using EF core, inMemomy database etc.

---------------------------------------
Part 4
Global Error Handling
Normally if we doesn't have Error Hanlding the response will send error as plain text to client which doesn't good and not useful for client.

1. Via Middleware
create middleware class to catch exception of the request
and then add middleware in http request pipeline by add this line
 app.UseMiddleware<ErrorHandlingMiddleware>();
 await _next(context); will invoke endpoint and all inner code of endpoint will be execute in puter try catch block
----------------------------------------------------------------------------------------- 
public class ErrorHandlingMiddleware
{
    private readonly RequestDelegate _next;

    public ErrorHandlingMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task Invoke(HttpContext context)
    {
        try
        {
            await _next(context);
        }
        catch (System.Exception ex)
        {
            await HandleExceptionAsync(context, ex);
        }
    }

    private static Task HandleExceptionAsync(HttpContext context, Exception ex)
    {
        var code = HttpStatusCode.InternalServerError;
        var result = JsonSerializer.Serialize(new { error = "An error occured while processing your request." });
        context.Response.ContentType = "application/json";
        context.Response.StatusCode = (int)code;
        return context.Response.WriteAsync(result);
    }
}
-----------------------------------------------------------------------------------------


2. Via Filter
create a filter atrribute that will be invoked when exception is not handled is thrown
by create class that inherited from ExceptionFilterAttribute
and add [ErrorHandlingFilterAttribute] at the controller 
or apply the filter to all controller by add more option to AddController services add program.cs with
builder.Services.AddController(options => options.Filters.Add<ErrorHandlingFilterAttribute>());

but with this approach is not standard and has one caveat is cannot catch HttpResponseException

-----------------------------------------------------------------------------------------


3. Problem Detail (standard RFC Specification) with error endpoint
ref : https://datatracker.ietf.org/doc/html/rfc7807#section-3
return error with 
Content Type : application/problem+json
Response Body : with 4 standard properties are 
type = uri reference that identifies the problem type
, title = summary of the problem type (must be unique)
, status = response status code
, detail = explanation of the problem and how to fix it
, instance = resource that we working on 
and other 
properties are extension (custom) 
which give more information about detail such as what parameters/body are sent to make this problem occured

the way to apply this approch is 
1. create ExceptionFilter class same as Filter Approch (2) but with 
ProblemDetail inside ObjectResult not hard coded 
 public class ErrorHandlingFilterAttribute : ExceptionFilterAttribute
    {
        public override void OnException(ExceptionContext context)
        {
            var exception = context.Exception;

            var problemDetails = new ProblemDetails
            {
                Type = "https://datatracker.ietf.org/doc/html/rfc7231#section-6.6.1",
                Title = "An error occured while processing your request.",
                Status = (int)HttpStatusCode.InternalServerError
            };

            context.Result = new ObjectResult(problemDetails);

            context.ExceptionHandled = true;

        }
    }

2. add ExceptionHandler middleware which will be catch all exception that occured by 
add this code app.UseExceptionHandler("/error"); 
which specifiy endpoint to handling the exception

3. create ErrorsController and action method with [Route("/error")] and in body action body
will access in the httpContext to get the thrown error information
        [Route("/error")]
        public IActionResult Error()
        {
            Exception? exception = HttpContext.Features.Get<IExceptionHandlerFeature>()?.Error;
            return Problem(title: exception?.Message, statusCode: (int)HttpStatusCode.BadRequest);
        }

-----------------------------------------------------------------------------------------

4. Problem Detail with Extension
Create Custom Problem Detail Factory which implement ProblemDetailFactory and implement the interface extension and edit ApplyProblemDetailsDefaults method add more keyValue to Extension